# coding: utf-8

"""
    RBVI ChimeraX Web Services

    REST API for RBVI web services supporting ChimeraX tools  # noqa: E501

    OpenAPI spec version: 0.2
    Contact: chimerax-users@cgl.ucsf.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse202(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'str',
        'status_url': 'str',
        'results_url': 'str',
        'cancel_url': 'str',
        'upload_url': 'str',
        'next_poll': 'str'
    }

    attribute_map = {
        'job_id': 'job_id',
        'status_url': 'status_url',
        'results_url': 'results_url',
        'cancel_url': 'cancel_url',
        'upload_url': 'upload_url',
        'next_poll': 'next_poll'
    }

    def __init__(self, job_id=None, status_url=None, results_url=None, cancel_url=None, upload_url=None, next_poll=None):  # noqa: E501
        """InlineResponse202 - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._status_url = None
        self._results_url = None
        self._cancel_url = None
        self._upload_url = None
        self._next_poll = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if status_url is not None:
            self.status_url = status_url
        if results_url is not None:
            self.results_url = results_url
        if cancel_url is not None:
            self.cancel_url = cancel_url
        if upload_url is not None:
            self.upload_url = upload_url
        if next_poll is not None:
            self.next_poll = next_poll

    @property
    def job_id(self):
        """Gets the job_id of this InlineResponse202.  # noqa: E501


        :return: The job_id of this InlineResponse202.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this InlineResponse202.


        :param job_id: The job_id of this InlineResponse202.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def status_url(self):
        """Gets the status_url of this InlineResponse202.  # noqa: E501


        :return: The status_url of this InlineResponse202.  # noqa: E501
        :rtype: str
        """
        return self._status_url

    @status_url.setter
    def status_url(self, status_url):
        """Sets the status_url of this InlineResponse202.


        :param status_url: The status_url of this InlineResponse202.  # noqa: E501
        :type: str
        """

        self._status_url = status_url

    @property
    def results_url(self):
        """Gets the results_url of this InlineResponse202.  # noqa: E501


        :return: The results_url of this InlineResponse202.  # noqa: E501
        :rtype: str
        """
        return self._results_url

    @results_url.setter
    def results_url(self, results_url):
        """Sets the results_url of this InlineResponse202.


        :param results_url: The results_url of this InlineResponse202.  # noqa: E501
        :type: str
        """

        self._results_url = results_url

    @property
    def cancel_url(self):
        """Gets the cancel_url of this InlineResponse202.  # noqa: E501


        :return: The cancel_url of this InlineResponse202.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this InlineResponse202.


        :param cancel_url: The cancel_url of this InlineResponse202.  # noqa: E501
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def upload_url(self):
        """Gets the upload_url of this InlineResponse202.  # noqa: E501


        :return: The upload_url of this InlineResponse202.  # noqa: E501
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this InlineResponse202.


        :param upload_url: The upload_url of this InlineResponse202.  # noqa: E501
        :type: str
        """

        self._upload_url = upload_url

    @property
    def next_poll(self):
        """Gets the next_poll of this InlineResponse202.  # noqa: E501


        :return: The next_poll of this InlineResponse202.  # noqa: E501
        :rtype: str
        """
        return self._next_poll

    @next_poll.setter
    def next_poll(self, next_poll):
        """Sets the next_poll of this InlineResponse202.


        :param next_poll: The next_poll of this InlineResponse202.  # noqa: E501
        :type: str
        """

        self._next_poll = next_poll

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse202, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse202):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
